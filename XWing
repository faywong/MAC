#!/bin/sh

str_cut()
{
	if [ -z "$4" ]; then
		export $1=
		export $2=
	elif [[ "$4" =~ "$3" ]]; then
		export $1=${4%%"$3"*}
		export $2=${4#*"$3"}
	elif [[ $5 == R ]]; then
		export $1=
		export $2="$4"
	else
		export $1="$4"
		export $2=
	fi
}

str_split()
{
	local _PARAMS=(${3//$1/ })
	for _PARAM in ${_PARAMS[@]}; do
		str_cut KEY VAL $2 $_PARAM
		export _$KEY=$VAL
		# echo "_$KEY=$VAL"
	done
}

url_parse()
{
	str_cut _PROTO _PART : "$1" R
	[[ $_PART == //* ]] && _PART=${_PART:2}
	#echo PROTO=$_PROTO
	uri_parse $_PART
}

uri_parse()
{
	str_cut _PART _HASH \# $1
	str_cut _SERV_PATH _QUERY ? $_PART
	str_split \& = $_QUERY
	str_cut _SERV _PATH / $_SERV_PATH
	str_cut _USER_PASS _HOST_PORT @ "$_SERV" R
	str_cut  _USER _PASS : $_USER_PASS
	str_cut _HOST _PORT : $_HOST_PORT

	# echo HASH=$_HASH
	# echo SERV_PATH=$_SERV_PATH
	# echo QUERY=$_QUERY
	# echo PATH=$_PATH
	# echo USER=$_USER
	# echo PASS=$_PASS
	# echo HOST=$_HOST
	# echo PORT=$_PORT
}

base64_dec()
{
	local _CNT=${#1}
	local _REM=$(( $_CNT % 4 ))
	if [ $_REM -eq 1 ]; then
		local _TEXT=${1}===
	elif [ $_REM -eq 2 ]; then
		local _TEXT=${1}==
	elif [ $_REM -eq 3 ]; then
		local _TEXT=${1}=
	else
		local _TEXT=$1
	fi
	echo $_TEXT | base64 -D
}

usage()
{
	echo "Usage: $0 <[start]|restart|stop|status|update|help>"
	echo
	echo "$0 [-v[0-5]] <XWING_URL>"
	echo
}

iface()
{
	sdev=`route get example.com 2> /dev/null | grep interface`
	sdev=${sdev:13}
	while read -r line; do
		echo $line | grep $sdev > /dev/null 2>&1
		if [ $? = 0 ]; then
			IFACE=${last_line:4}
			break
		fi
		last_line=$line
	done <<< "$(networksetup -listnetworkserviceorder)"

	if [ -z "$IFACE" ]; then
		>&2 echo "Could not find current service"
		exit 1
	fi	
}


start()
{
	if [ ! -z $2 ]; then
		local XURL=$2
	elif [ ! -z $XWING_URL ]; then
		local XURL=$XWING_URL
	else
		usage
		return
	fi

	iface
	echo "Local Network: $IFACE"

	url_parse $XURL

	if [ $_PROTO == socks5 ]; then
		PROXY_PROTO=$_PROTO
		PROXY_HOST=$_HOST
		PROXY_PORT=$_PORT
	else
		echo "Remote $XURL"
		PROXY_PROTO=socks5
		PROXY_HOST=127.0.0.1
		PROXY_PORT=1080
	fi

	echo "export ALL_PROXY=$PROXY_PROTO://$PROXY_HOST:$PROXY_PORT"
	networksetup -setsocksfirewallproxy $IFACE $PROXY_HOST $PROXY_PORT

	[ -z $_PORT ] && _PORT=443
	if [ $_PROTO == trojan ]; then
		echo "{\"local_addr\":\"0.0.0.0\",\"local_port\":1080,\"remote_addr\":\"$_HOST\",\"remote_port\":443,\"password\":[\"$_USER\"],\"log_level\":$1,\"ssl\":{\"verify\":false}}" > /tmp/trojan.conf
		XCMD="trojan -c /tmp/trojan.conf"
	elif [ $_PROTO == ss ]; then
		if [ -z $_USER ]; then
			uri_parse `base64_dec $_HOST`
		elif [ -z $_PASS ]; then
			str_cut _USER _PASS : `base64_dec $_USER`
		fi
		XCMD="ss-local -s $_HOST -p $_PORT -k $_PASS -l 1080 -m $_USER"
		echo "$XCMD" > /tmp/ss.sh
	elif [ $_PROTO == ssr ]; then
		if [ -z $_USER ]; then
			echo "==>"
			uri_parse `base64_dec $_HOST`
			local _ARGS=(${_PORT//:/ })
			_PORT=${_ARGS[0]}
			_PATH=${_ARGS[1]}
			_USER=${_ARGS[2]}
			_HASH=${_ARGS[3]}
			_PASS=`base64_dec ${_ARGS[4]}`
			_obfsparam=`base64_dec $_obfsparam`
			_protoparam=`base64_dec $_protoparam`
		fi
		echo "{\"password\":\"$_PASS\",\"method\":\"$_USER\",\"protocol\":\"$_PATH\",\"protocol_param\":\"$_protoparam\",\"obfs\":\"$_HASH\",\"obfs_param\":\"$_obfsparam\",\"client_settings\":{\"server\":\"$_HOST\",\"server_port\":$_PORT,\"listen_address\":\"0.0.0.0\",\"listen_port\":1080}}" > /tmp/ssr.conf
		XCMD="ssr-client -c /tmp/ssr.conf"
	else
		return
	fi

	if [ $1 -ge 2 ]; then
		nohup "$XCMD" &> /tmp/xwing.log &
	else
		$XCMD
		networksetup -setsocksfirewallproxystate $IFACE off
	fi
}

stop()
{
	iface
	networksetup -setsocksfirewallproxystate $IFACE off
	if [ -f /tmp/trojan.conf ]; then
		rm /tmp/trojan.conf
		killall trojan
	fi
	if [ -f /tmp/ssr.conf ]; then
		rm /tmp/ssr.conf
		killall ssr-client
	fi
	if [ -f /tmp/ss.sh ]; then
		rm /tmp/ss.sh
		killall ss-local
	fi
}

status()
{
	tail -f /tmp/xwing.log
}

case "$1" in
	-h|help)
		usage
		;;
	start)
		start 2 $2
		;;
	stop)
		stop
		;;
	restart)
		stop
		start 2 $2
		;;
	s|status)
		status
		;;
	-v0|-v1|-v2|-v3|-v4|-v5)
		start ${1:2} $2
		;;
	-v)
		start 0 $2
		;;
	*)
		start 1 "$1"
		;;
esac
