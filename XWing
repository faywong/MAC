#!/bin/sh

usage()
{
	echo "Usage: $0 <[start]|restart|stop|status|update|help>"
	echo
	echo "$0 [-v[0-5]] <XWING_URL>"
	echo
}

split_str()
{
	if [ -z "$4" ]; then
		export $1=
		export $2=
	elif [[ "$4" =~ "$3" ]]; then
		export $1=${4%%"$3"*}
		export $2=${4#*"$3"}
	else
		export $1="$4"
		export $2=
	fi
}

rsplit_str()
{
	if [ -z "$4" ]; then
		export $1=
		export $2=
	elif [[ "$4" =~ "$3" ]]; then
		export $1=${4%"$3"*}
		export $2=${4##*"$3"}
	else
		export $1=
		export $2="$4"
	fi
}

parse_query()
{
	local ITEMS=(${1//\&/ })
	for ITEM in ${ITEMS[@]}; do
		split_str KEY VAL = $ITEM
		export _$KEY=$VAL
		# echo "_$KEY=$VAL"
	done
}

parse_uri()
{
	split_str _TEXT _HASH \# $1
	split_str _SERV_PATH _QUERY ? $_TEXT
	parse_query $_QUERY
	split_str _SERV _PATH / $_SERV_PATH
	rsplit_str _USER_PASS _HOST_PORT @ $_SERV
	split_str  _USER _PASS : $_USER_PASS
	split_str _HOST _PORT : $_HOST_PORT

	# echo HASH=$_HASH
	# echo SERV_PATH=$_SERV_PATH
	# echo QUERY=$_QUERY
	# echo PATH=$_PATH
	# echo USER=$_USER
	# echo PASS=$_PASS
	# echo HOST=$_HOST
	# echo PORT=$_PORT
}

parse_url()
{
	split_str _PROTO _TEXT : "$1" R
	[[ $_TEXT == //* ]] && _TEXT=${_TEXT:2}
	#echo PROTO=$_PROTO
	parse_uri $_TEXT
}

make_url()
{
	local URL="$_PROTO://$_USER:$_PASS@$_HOST:$_PORT"
	[ ! -z $_PATH ] && URL="$URL/$_PATH"
	[ ! -z $_QUERY ] && URL="$URL?$_QUERY"
	[ ! -z $_HASH ] && URL="$URL#$_HASH"
	echo $URL
}

decode_b64()
{
	local CNT=${#1}
	local REM=$(( $CNT % 4 ))
	if [ $REM -eq 1 ]; then
		local TEXT=${1}===
	elif [ $REM -eq 2 ]; then
		local TEXT=${1}==
	elif [ $REM -eq 3 ]; then
		local TEXT=${1}=
	else
		local TEXT=$1
	fi
	echo $TEXT | base64 -D
}

find_net()
{
	local SDEV=`route get example.com 2> /dev/null | grep interface`
	local SDEV=${SDEV:13}
	while read -r LINE; do
		echo $LINE | grep $SDEV > /dev/null 2>&1
		if [ $? = 0 ]; then
			_NETWORK=${LAST_LINE:4}
			break
		fi
		LAST_LINE=$LINE
	done <<< "$(networksetup -listnetworkserviceorder)"

	[ -z "$_NETWORK" ] && echo "Could not find network service" && exit 1
}


start()
{
	if [ ! -z $2 ]; then
		local XURL=$2
	elif [ ! -z $XWING_URL ]; then
		local XURL=$XWING_URL
	else
		usage
		return
	fi

	find_net
	echo "Local Network: $_NETWORK"

	parse_url $XURL

	if [ $_PROTO == socks5 ]; then
		PROXY_PROTO=$_PROTO
		PROXY_HOST=$_HOST
		PROXY_PORT=$_PORT
	else
		PROXY_PROTO=socks5
		PROXY_HOST=127.0.0.1
		PROXY_PORT=1080
	fi

	echo "export ALL_PROXY=$PROXY_PROTO://$PROXY_HOST:$PROXY_PORT"
	networksetup -setsocksfirewallproxy $_NETWORK $PROXY_HOST $PROXY_PORT

	[ -z $_PORT ] && _PORT=443
	if [ $_PROTO == trojan ]; then
		echo "{\"local_addr\":\"0.0.0.0\",\"local_port\":1080,\"remote_addr\":\"$_HOST\",\"remote_port\":443,\"password\":[\"$_USER\"],\"log_level\":$1,\"ssl\":{\"verify\":false}}" > /tmp/trojan.conf
		local XCMD="trojan -c /tmp/trojan.conf"
	elif [ $_PROTO == ss ]; then
		if [ -z $_USER ]; then
			parse_uri `decode_b64 $_HOST`
		elif [ -z $_PASS ]; then
			split_str _USER _PASS : `decode_b64 $_USER`
		fi
		echo "{\"server\":\"$_HOST\",\"server_port\":$_PORT,\"local_address\":\"0.0.0.0\",\"local_port\":1080,\"password\":\"$_PASS\",\"method\":\"$_USER\"}" > /tmp/ss.conf
		if [ $1 -ge 2 ]; then
			local XCMD="ss-local -c /tmp/ss.conf"
		else
			local XCMD="ss-local -v -s $_HOST -p $_PORT -k $_PASS -l 1080 -m $_USER"
		fi
		local XURL=`make_url`
	elif [ $_PROTO == ssr ]; then
		if [ -z $_USER ]; then
			parse_uri `decode_b64 $_HOST`
			local ITEMS=(${_PORT//:/ })
			_PORT=${ITEMS[0]}
			_PATH=${ITEMS[1]}
			_USER=${ITEMS[2]}
			_HASH=${ITEMS[3]}
			_PASS=`decode_b64 ${ITEMS[4]}`
			_obfsparam=`decode_b64 $_obfsparam`
			_protoparam=`decode_b64 $_protoparam`
			_QUERY="protoparam=$_protoparam&obfsparam=$_obfsparam"
			local XURL=`make_url`
		fi
		echo "{\"password\":\"$_PASS\",\"method\":\"$_USER\",\"protocol\":\"$_PATH\",\"protocol_param\":\"$_protoparam\",\"obfs\":\"$_HASH\",\"obfs_param\":\"$_obfsparam\",\"client_settings\":{\"server\":\"$_HOST\",\"server_port\":$_PORT,\"listen_address\":\"0.0.0.0\",\"listen_port\":1080}}" > /tmp/ssr.conf
		local XCMD="ssr-client -c /tmp/ssr.conf"
	elif [ $_PROTO == vmess ]; then
		echo TODO!
	else
		return
	fi

	echo "export XWING_URL=$XURL\n"

	if [ $1 -ge 2 ]; then
		nohup "$XCMD" &> /tmp/xwing.log &
	else
		$XCMD
		networksetup -setsocksfirewallproxystate $_NETWORK off
	fi
}

stop()
{
	find_net
	networksetup -setsocksfirewallproxystate $_NETWORK off
	if [ -f /tmp/trojan.conf ]; then
		rm /tmp/trojan.conf
		killall trojan
	fi
	if [ -f /tmp/ssr.conf ]; then
		rm /tmp/ssr.conf
		killall ssr-client
	fi
	if [ -f /tmp/ss.sh ]; then
		rm /tmp/ss.sh
		killall ss-local
	fi
}

status()
{
	tail -f /tmp/xwing.log
}

case "$1" in
	-h|help)
		usage
		;;
	start)
		start 2 $2
		;;
	stop)
		stop
		;;
	restart)
		stop
		start 2 $2
		;;
	s|status)
		status
		;;
	-v0|-v1|-v2|-v3|-v4|-v5)
		start ${1:2} $2
		;;
	-v)
		start 0 $2
		;;
	*)
		start 1 "$1"
		;;
esac
